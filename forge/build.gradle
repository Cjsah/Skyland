plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}
def common_project = project(":common")

loom {
    accessWidenerPath = common_project.file("src/main/resources/anvilcraft_skyland.accesswidener")

    forge {
        mixinConfig "anvilcraft_skyland-common.mixins.json"
        mixinConfig "anvilcraft_skyland.mixins.json"
    }

    runs {
        create("gameTestServer") {
            server()
            name("Minecraft Game Test")
            source("main")

            property("forge.enabledGameTestNamespaces", mod_id)
            property("forge.gameTestServer", "true")

            mods {
                create(mod_id) {
                    sourceSet("main")
                }
            }
        }
    }
}
architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

repositories {
    maven {
        name 'cjsah maven'
        url 'https://server.cjsah.net:1002/maven/'
    }
    maven { url = "https://maven.shedaniel.me/" }
    maven { url = "https://maven.theillusivec4.top/" } // Curios
    maven { url = "https://maven.parchmentmc.org" } // Parchment mappings
    maven { url = "https://maven.quiltmc.org/repository/release" } // Quilt Mappings
    maven { // TOP
        url "https://maven.k-4u.nl"
    }
    maven {
        // saps.dev Maven (KubeJS and Rhino)
        url = "https://maven.saps.dev/minecraft"
        content {
            includeGroup "dev.latvian.mods"
        }
    }
    maven { url 'https://jitpack.io' } // Mixin Extras, Fabric ASM
    maven { // Create Forge and Registrate Forge
        url = "https://maven.tterrag.com/"
        content {
            includeGroup("com.simibubi.create")
        }
    }
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    // modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
    // Mixin Extras
    implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.0-beta.2"))
    implementation(include("io.github.llamalad7:mixinextras-forge:0.4.0-beta.2"))

    modImplementation("dev.anvilcraft.lib:anvillib-forge-1.20.1:${rootProject.anvil_lib_version}")
    include "dev.anvilcraft.lib:anvillib-forge-1.20.1:${rootProject.anvil_lib_version}"
    modImplementation("dev.dubhe:anvilcraft-forge-1.20.1:${rootProject.anvilcraft_version}")
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    inputFile.set(shadowJar.archiveFile)
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
